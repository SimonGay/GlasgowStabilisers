/* This file was generated by SableCC (http://www.sablecc.org/). */

package equivalence.node;

import equivalence.analysis.*;

@SuppressWarnings("nls")
public final class AInputTerm extends PTerm
{
    private TInput _input_;
    private PIdlist _idlist_;
    private PSep _sep_;
    private PTerm _term_;

    public AInputTerm()
    {
        // Constructor
    }

    public AInputTerm(
        @SuppressWarnings("hiding") TInput _input_,
        @SuppressWarnings("hiding") PIdlist _idlist_,
        @SuppressWarnings("hiding") PSep _sep_,
        @SuppressWarnings("hiding") PTerm _term_)
    {
        // Constructor
        setInput(_input_);

        setIdlist(_idlist_);

        setSep(_sep_);

        setTerm(_term_);

    }

    @Override
    public Object clone()
    {
        return new AInputTerm(
            cloneNode(this._input_),
            cloneNode(this._idlist_),
            cloneNode(this._sep_),
            cloneNode(this._term_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAInputTerm(this);
    }

    public TInput getInput()
    {
        return this._input_;
    }

    public void setInput(TInput node)
    {
        if(this._input_ != null)
        {
            this._input_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._input_ = node;
    }

    public PIdlist getIdlist()
    {
        return this._idlist_;
    }

    public void setIdlist(PIdlist node)
    {
        if(this._idlist_ != null)
        {
            this._idlist_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._idlist_ = node;
    }

    public PSep getSep()
    {
        return this._sep_;
    }

    public void setSep(PSep node)
    {
        if(this._sep_ != null)
        {
            this._sep_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._sep_ = node;
    }

    public PTerm getTerm()
    {
        return this._term_;
    }

    public void setTerm(PTerm node)
    {
        if(this._term_ != null)
        {
            this._term_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._term_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._input_)
            + toString(this._idlist_)
            + toString(this._sep_)
            + toString(this._term_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._input_ == child)
        {
            this._input_ = null;
            return;
        }

        if(this._idlist_ == child)
        {
            this._idlist_ = null;
            return;
        }

        if(this._sep_ == child)
        {
            this._sep_ = null;
            return;
        }

        if(this._term_ == child)
        {
            this._term_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._input_ == oldChild)
        {
            setInput((TInput) newChild);
            return;
        }

        if(this._idlist_ == oldChild)
        {
            setIdlist((PIdlist) newChild);
            return;
        }

        if(this._sep_ == oldChild)
        {
            setSep((PSep) newChild);
            return;
        }

        if(this._term_ == oldChild)
        {
            setTerm((PTerm) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
