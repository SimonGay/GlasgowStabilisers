/* This file was generated by SableCC (http://www.sablecc.org/). */

package equivalence.analysis;

import equivalence.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseATermProcess(ATermProcess node);
    void caseAParallelProcess(AParallelProcess node);
    void caseANilTerm(ANilTerm node);
    void caseASendTerm(ASendTerm node);
    void caseAReceiveTerm(AReceiveTerm node);
    void caseAMeasureTerm(AMeasureTerm node);
    void caseAXTerm(AXTerm node);
    void caseAYTerm(AYTerm node);
    void caseAZTerm(AZTerm node);
    void caseAHTerm(AHTerm node);
    void caseACnotTerm(ACnotTerm node);
    void caseAIfxTerm(AIfxTerm node);
    void caseAIfyTerm(AIfyTerm node);
    void caseAIfzTerm(AIfzTerm node);
    void caseANewTerm(ANewTerm node);
    void caseAInputTerm(AInputTerm node);
    void caseAOutputTerm(AOutputTerm node);
    void caseAPrintTerm(APrintTerm node);
    void caseAParensTerm(AParensTerm node);
    void caseAIdIdlist(AIdIdlist node);
    void caseAIdconsIdlist(AIdconsIdlist node);
    void caseADotSep(ADotSep node);
    void caseASemiSep(ASemiSep node);

    void caseTParallel(TParallel node);
    void caseTDot(TDot node);
    void caseTNil(TNil node);
    void caseTSemi(TSemi node);
    void caseTComma(TComma node);
    void caseTBang(TBang node);
    void caseTSend(TSend node);
    void caseTQuery(TQuery node);
    void caseTReceive(TReceive node);
    void caseTOn(TOn node);
    void caseTX(TX node);
    void caseTY(TY node);
    void caseTZ(TZ node);
    void caseTH(TH node);
    void caseTCnot(TCnot node);
    void caseTMeasure(TMeasure node);
    void caseTNewqubit(TNewqubit node);
    void caseTIf(TIf node);
    void caseTThen(TThen node);
    void caseTElse(TElse node);
    void caseTInput(TInput node);
    void caseTOutput(TOutput node);
    void caseTPrint(TPrint node);
    void caseTAssign(TAssign node);
    void caseTLparen(TLparen node);
    void caseTRparen(TRparen node);
    void caseTIntlit(TIntlit node);
    void caseTBlank(TBlank node);
    void caseTComment(TComment node);
    void caseTId(TId node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
