/* This file was generated by SableCC (http://www.sablecc.org/). */

package equivalence.node;

import equivalence.analysis.*;

@SuppressWarnings("nls")
public final class AXTerm extends PTerm
{
    private TX _x_;
    private TLparen _lparen_;
    private TId _id_;
    private TRparen _rparen_;
    private PSep _sep_;
    private PTerm _term_;

    public AXTerm()
    {
        // Constructor
    }

    public AXTerm(
        @SuppressWarnings("hiding") TX _x_,
        @SuppressWarnings("hiding") TLparen _lparen_,
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") TRparen _rparen_,
        @SuppressWarnings("hiding") PSep _sep_,
        @SuppressWarnings("hiding") PTerm _term_)
    {
        // Constructor
        setX(_x_);

        setLparen(_lparen_);

        setId(_id_);

        setRparen(_rparen_);

        setSep(_sep_);

        setTerm(_term_);

    }

    @Override
    public Object clone()
    {
        return new AXTerm(
            cloneNode(this._x_),
            cloneNode(this._lparen_),
            cloneNode(this._id_),
            cloneNode(this._rparen_),
            cloneNode(this._sep_),
            cloneNode(this._term_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAXTerm(this);
    }

    public TX getX()
    {
        return this._x_;
    }

    public void setX(TX node)
    {
        if(this._x_ != null)
        {
            this._x_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._x_ = node;
    }

    public TLparen getLparen()
    {
        return this._lparen_;
    }

    public void setLparen(TLparen node)
    {
        if(this._lparen_ != null)
        {
            this._lparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lparen_ = node;
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TRparen getRparen()
    {
        return this._rparen_;
    }

    public void setRparen(TRparen node)
    {
        if(this._rparen_ != null)
        {
            this._rparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rparen_ = node;
    }

    public PSep getSep()
    {
        return this._sep_;
    }

    public void setSep(PSep node)
    {
        if(this._sep_ != null)
        {
            this._sep_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._sep_ = node;
    }

    public PTerm getTerm()
    {
        return this._term_;
    }

    public void setTerm(PTerm node)
    {
        if(this._term_ != null)
        {
            this._term_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._term_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._x_)
            + toString(this._lparen_)
            + toString(this._id_)
            + toString(this._rparen_)
            + toString(this._sep_)
            + toString(this._term_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._x_ == child)
        {
            this._x_ = null;
            return;
        }

        if(this._lparen_ == child)
        {
            this._lparen_ = null;
            return;
        }

        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._rparen_ == child)
        {
            this._rparen_ = null;
            return;
        }

        if(this._sep_ == child)
        {
            this._sep_ = null;
            return;
        }

        if(this._term_ == child)
        {
            this._term_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._x_ == oldChild)
        {
            setX((TX) newChild);
            return;
        }

        if(this._lparen_ == oldChild)
        {
            setLparen((TLparen) newChild);
            return;
        }

        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._rparen_ == oldChild)
        {
            setRparen((TRparen) newChild);
            return;
        }

        if(this._sep_ == oldChild)
        {
            setSep((PSep) newChild);
            return;
        }

        if(this._term_ == oldChild)
        {
            setTerm((PTerm) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
