/* This file was generated by SableCC (http://www.sablecc.org/). */

package equivalence.parser;

import equivalence.lexer.*;
import equivalence.node.*;
import equivalence.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProcess node1 = (PProcess) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce ATermProcess */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AParallelProcess */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce ANilTerm */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce ASendTerm */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list, false);
            }
            break;
            case 4: /* reduce AReceiveTerm */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list, false);
            }
            break;
            case 5: /* reduce AMeasureTerm */
            {
                ArrayList<Object> list = new5();
                push(goTo(1), list, false);
            }
            break;
            case 6: /* reduce AXTerm */
            {
                ArrayList<Object> list = new6();
                push(goTo(1), list, false);
            }
            break;
            case 7: /* reduce AYTerm */
            {
                ArrayList<Object> list = new7();
                push(goTo(1), list, false);
            }
            break;
            case 8: /* reduce AZTerm */
            {
                ArrayList<Object> list = new8();
                push(goTo(1), list, false);
            }
            break;
            case 9: /* reduce AHTerm */
            {
                ArrayList<Object> list = new9();
                push(goTo(1), list, false);
            }
            break;
            case 10: /* reduce ACnotTerm */
            {
                ArrayList<Object> list = new10();
                push(goTo(1), list, false);
            }
            break;
            case 11: /* reduce AIfxTerm */
            {
                ArrayList<Object> list = new11();
                push(goTo(1), list, false);
            }
            break;
            case 12: /* reduce AIfyTerm */
            {
                ArrayList<Object> list = new12();
                push(goTo(1), list, false);
            }
            break;
            case 13: /* reduce AIfzTerm */
            {
                ArrayList<Object> list = new13();
                push(goTo(1), list, false);
            }
            break;
            case 14: /* reduce ANewTerm */
            {
                ArrayList<Object> list = new14();
                push(goTo(1), list, false);
            }
            break;
            case 15: /* reduce AInputTerm */
            {
                ArrayList<Object> list = new15();
                push(goTo(1), list, false);
            }
            break;
            case 16: /* reduce AOutputTerm */
            {
                ArrayList<Object> list = new16();
                push(goTo(1), list, false);
            }
            break;
            case 17: /* reduce APrintTerm */
            {
                ArrayList<Object> list = new17();
                push(goTo(1), list, false);
            }
            break;
            case 18: /* reduce AParensTerm */
            {
                ArrayList<Object> list = new18();
                push(goTo(1), list, false);
            }
            break;
            case 19: /* reduce AIdIdlist */
            {
                ArrayList<Object> list = new19();
                push(goTo(2), list, false);
            }
            break;
            case 20: /* reduce AIdconsIdlist */
            {
                ArrayList<Object> list = new20();
                push(goTo(2), list, false);
            }
            break;
            case 21: /* reduce ADotSep */
            {
                ArrayList<Object> list = new21();
                push(goTo(3), list, false);
            }
            break;
            case 22: /* reduce ASemiSep */
            {
                ArrayList<Object> list = new22();
                push(goTo(3), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce ATermProcess */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProcess pprocessNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        pprocessNode1 = new ATermProcess(ptermNode2);
        }
	nodeList.add(pprocessNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AParallelProcess */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProcess pprocessNode1;
        {
            // Block
        PTerm ptermNode2;
        TParallel tparallelNode3;
        PTerm ptermNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        tparallelNode3 = (TParallel)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pprocessNode1 = new AParallelProcess(ptermNode2, tparallelNode3, ptermNode4);
        }
	nodeList.add(pprocessNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce ANilTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TNil tnilNode2;
        tnilNode2 = (TNil)nodeArrayList1.get(0);

        ptermNode1 = new ANilTerm(tnilNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce ASendTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TSend tsendNode2;
        TId tidNode3;
        TOn tonNode4;
        TId tidNode5;
        PSep psepNode6;
        PTerm ptermNode7;
        tsendNode2 = (TSend)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tonNode4 = (TOn)nodeArrayList3.get(0);
        tidNode5 = (TId)nodeArrayList4.get(0);
        psepNode6 = (PSep)nodeArrayList5.get(0);
        ptermNode7 = (PTerm)nodeArrayList6.get(0);

        ptermNode1 = new ASendTerm(tsendNode2, tidNode3, tonNode4, tidNode5, psepNode6, ptermNode7);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AReceiveTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TReceive treceiveNode2;
        TId tidNode3;
        TOn tonNode4;
        TId tidNode5;
        PSep psepNode6;
        PTerm ptermNode7;
        treceiveNode2 = (TReceive)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tonNode4 = (TOn)nodeArrayList3.get(0);
        tidNode5 = (TId)nodeArrayList4.get(0);
        psepNode6 = (PSep)nodeArrayList5.get(0);
        ptermNode7 = (PTerm)nodeArrayList6.get(0);

        ptermNode1 = new AReceiveTerm(treceiveNode2, tidNode3, tonNode4, tidNode5, psepNode6, ptermNode7);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AMeasureTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TId tidNode2;
        TAssign tassignNode3;
        TMeasure tmeasureNode4;
        TId tidNode5;
        PSep psepNode6;
        PTerm ptermNode7;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tassignNode3 = (TAssign)nodeArrayList2.get(0);
        tmeasureNode4 = (TMeasure)nodeArrayList3.get(0);
        tidNode5 = (TId)nodeArrayList4.get(0);
        psepNode6 = (PSep)nodeArrayList5.get(0);
        ptermNode7 = (PTerm)nodeArrayList6.get(0);

        ptermNode1 = new AMeasureTerm(tidNode2, tassignNode3, tmeasureNode4, tidNode5, psepNode6, ptermNode7);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AXTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TX txNode2;
        TLparen tlparenNode3;
        TId tidNode4;
        TRparen trparenNode5;
        PSep psepNode6;
        PTerm ptermNode7;
        txNode2 = (TX)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);
        psepNode6 = (PSep)nodeArrayList5.get(0);
        ptermNode7 = (PTerm)nodeArrayList6.get(0);

        ptermNode1 = new AXTerm(txNode2, tlparenNode3, tidNode4, trparenNode5, psepNode6, ptermNode7);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AYTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TY tyNode2;
        TLparen tlparenNode3;
        TId tidNode4;
        TRparen trparenNode5;
        PSep psepNode6;
        PTerm ptermNode7;
        tyNode2 = (TY)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);
        psepNode6 = (PSep)nodeArrayList5.get(0);
        ptermNode7 = (PTerm)nodeArrayList6.get(0);

        ptermNode1 = new AYTerm(tyNode2, tlparenNode3, tidNode4, trparenNode5, psepNode6, ptermNode7);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AZTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TZ tzNode2;
        TLparen tlparenNode3;
        TId tidNode4;
        TRparen trparenNode5;
        PSep psepNode6;
        PTerm ptermNode7;
        tzNode2 = (TZ)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);
        psepNode6 = (PSep)nodeArrayList5.get(0);
        ptermNode7 = (PTerm)nodeArrayList6.get(0);

        ptermNode1 = new AZTerm(tzNode2, tlparenNode3, tidNode4, trparenNode5, psepNode6, ptermNode7);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AHTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TH thNode2;
        TLparen tlparenNode3;
        TId tidNode4;
        TRparen trparenNode5;
        PSep psepNode6;
        PTerm ptermNode7;
        thNode2 = (TH)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);
        psepNode6 = (PSep)nodeArrayList5.get(0);
        ptermNode7 = (PTerm)nodeArrayList6.get(0);

        ptermNode1 = new AHTerm(thNode2, tlparenNode3, tidNode4, trparenNode5, psepNode6, ptermNode7);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ACnotTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TCnot tcnotNode2;
        TLparen tlparenNode3;
        TId tidNode4;
        TComma tcommaNode5;
        TId tidNode6;
        TRparen trparenNode7;
        PSep psepNode8;
        PTerm ptermNode9;
        tcnotNode2 = (TCnot)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        tcommaNode5 = (TComma)nodeArrayList4.get(0);
        tidNode6 = (TId)nodeArrayList5.get(0);
        trparenNode7 = (TRparen)nodeArrayList6.get(0);
        psepNode8 = (PSep)nodeArrayList7.get(0);
        ptermNode9 = (PTerm)nodeArrayList8.get(0);

        ptermNode1 = new ACnotTerm(tcnotNode2, tlparenNode3, tidNode4, tcommaNode5, tidNode6, trparenNode7, psepNode8, ptermNode9);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AIfxTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TIf tifNode2;
        TId tidNode3;
        TThen tthenNode4;
        TX txNode5;
        TLparen tlparenNode6;
        TId tidNode7;
        TRparen trparenNode8;
        PSep psepNode9;
        PTerm ptermNode10;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        txNode5 = (TX)nodeArrayList4.get(0);
        tlparenNode6 = (TLparen)nodeArrayList5.get(0);
        tidNode7 = (TId)nodeArrayList6.get(0);
        trparenNode8 = (TRparen)nodeArrayList7.get(0);
        psepNode9 = (PSep)nodeArrayList8.get(0);
        ptermNode10 = (PTerm)nodeArrayList9.get(0);

        ptermNode1 = new AIfxTerm(tifNode2, tidNode3, tthenNode4, txNode5, tlparenNode6, tidNode7, trparenNode8, psepNode9, ptermNode10);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AIfyTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TIf tifNode2;
        TId tidNode3;
        TThen tthenNode4;
        TY tyNode5;
        TLparen tlparenNode6;
        TId tidNode7;
        TRparen trparenNode8;
        PSep psepNode9;
        PTerm ptermNode10;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        tyNode5 = (TY)nodeArrayList4.get(0);
        tlparenNode6 = (TLparen)nodeArrayList5.get(0);
        tidNode7 = (TId)nodeArrayList6.get(0);
        trparenNode8 = (TRparen)nodeArrayList7.get(0);
        psepNode9 = (PSep)nodeArrayList8.get(0);
        ptermNode10 = (PTerm)nodeArrayList9.get(0);

        ptermNode1 = new AIfyTerm(tifNode2, tidNode3, tthenNode4, tyNode5, tlparenNode6, tidNode7, trparenNode8, psepNode9, ptermNode10);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AIfzTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TIf tifNode2;
        TId tidNode3;
        TThen tthenNode4;
        TZ tzNode5;
        TLparen tlparenNode6;
        TId tidNode7;
        TRparen trparenNode8;
        PSep psepNode9;
        PTerm ptermNode10;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        tzNode5 = (TZ)nodeArrayList4.get(0);
        tlparenNode6 = (TLparen)nodeArrayList5.get(0);
        tidNode7 = (TId)nodeArrayList6.get(0);
        trparenNode8 = (TRparen)nodeArrayList7.get(0);
        psepNode9 = (PSep)nodeArrayList8.get(0);
        ptermNode10 = (PTerm)nodeArrayList9.get(0);

        ptermNode1 = new AIfzTerm(tifNode2, tidNode3, tthenNode4, tzNode5, tlparenNode6, tidNode7, trparenNode8, psepNode9, ptermNode10);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ANewTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TNewqubit tnewqubitNode2;
        TId tidNode3;
        PSep psepNode4;
        PTerm ptermNode5;
        tnewqubitNode2 = (TNewqubit)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        psepNode4 = (PSep)nodeArrayList3.get(0);
        ptermNode5 = (PTerm)nodeArrayList4.get(0);

        ptermNode1 = new ANewTerm(tnewqubitNode2, tidNode3, psepNode4, ptermNode5);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AInputTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TInput tinputNode2;
        PIdlist pidlistNode3;
        PSep psepNode4;
        PTerm ptermNode5;
        tinputNode2 = (TInput)nodeArrayList1.get(0);
        pidlistNode3 = (PIdlist)nodeArrayList2.get(0);
        psepNode4 = (PSep)nodeArrayList3.get(0);
        ptermNode5 = (PTerm)nodeArrayList4.get(0);

        ptermNode1 = new AInputTerm(tinputNode2, pidlistNode3, psepNode4, ptermNode5);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AOutputTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TOutput toutputNode2;
        PIdlist pidlistNode3;
        PSep psepNode4;
        PTerm ptermNode5;
        toutputNode2 = (TOutput)nodeArrayList1.get(0);
        pidlistNode3 = (PIdlist)nodeArrayList2.get(0);
        psepNode4 = (PSep)nodeArrayList3.get(0);
        ptermNode5 = (PTerm)nodeArrayList4.get(0);

        ptermNode1 = new AOutputTerm(toutputNode2, pidlistNode3, psepNode4, ptermNode5);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce APrintTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TPrint tprintNode2;
        TId tidNode3;
        PSep psepNode4;
        PTerm ptermNode5;
        tprintNode2 = (TPrint)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        psepNode4 = (PSep)nodeArrayList3.get(0);
        ptermNode5 = (PTerm)nodeArrayList4.get(0);

        ptermNode1 = new APrintTerm(tprintNode2, tidNode3, psepNode4, ptermNode5);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AParensTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TLparen tlparenNode2;
        PProcess pprocessNode3;
        TRparen trparenNode4;
        tlparenNode2 = (TLparen)nodeArrayList1.get(0);
        pprocessNode3 = (PProcess)nodeArrayList2.get(0);
        trparenNode4 = (TRparen)nodeArrayList3.get(0);

        ptermNode1 = new AParensTerm(tlparenNode2, pprocessNode3, trparenNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AIdIdlist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIdlist pidlistNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pidlistNode1 = new AIdIdlist(tidNode2);
        }
	nodeList.add(pidlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AIdconsIdlist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIdlist pidlistNode1;
        {
            // Block
        TId tidNode2;
        TComma tcommaNode3;
        PIdlist pidlistNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pidlistNode4 = (PIdlist)nodeArrayList3.get(0);

        pidlistNode1 = new AIdconsIdlist(tidNode2, tcommaNode3, pidlistNode4);
        }
	nodeList.add(pidlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce ADotSep */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSep psepNode1;
        {
            // Block
        TDot tdotNode2;
        tdotNode2 = (TDot)nodeArrayList1.get(0);

        psepNode1 = new ADotSep(tdotNode2);
        }
	nodeList.add(psepNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ASemiSep */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSep psepNode1;
        {
            // Block
        TSemi tsemiNode2;
        tsemiNode2 = (TSemi)nodeArrayList1.get(0);

        psepNode1 = new ASemiSep(tsemiNode2);
        }
	nodeList.add(psepNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {2, SHIFT, 1}, {6, SHIFT, 2}, {8, SHIFT, 3}, {10, SHIFT, 4}, {11, SHIFT, 5}, {12, SHIFT, 6}, {13, SHIFT, 7}, {14, SHIFT, 8}, {16, SHIFT, 9}, {17, SHIFT, 10}, {20, SHIFT, 11}, {21, SHIFT, 12}, {22, SHIFT, 13}, {24, SHIFT, 14}, {27, SHIFT, 15}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 2}, {27, SHIFT, 18}, },
			{{-1, ERROR, 3}, {27, SHIFT, 19}, },
			{{-1, ERROR, 4}, {24, SHIFT, 20}, },
			{{-1, ERROR, 5}, {24, SHIFT, 21}, },
			{{-1, ERROR, 6}, {24, SHIFT, 22}, },
			{{-1, ERROR, 7}, {24, SHIFT, 23}, },
			{{-1, ERROR, 8}, {24, SHIFT, 24}, },
			{{-1, ERROR, 9}, {27, SHIFT, 25}, },
			{{-1, ERROR, 10}, {27, SHIFT, 26}, },
			{{-1, ERROR, 11}, {27, SHIFT, 27}, },
			{{-1, ERROR, 12}, {27, SHIFT, 27}, },
			{{-1, ERROR, 13}, {27, SHIFT, 30}, },
			{{-1, ERROR, 14}, {2, SHIFT, 1}, {6, SHIFT, 2}, {8, SHIFT, 3}, {10, SHIFT, 4}, {11, SHIFT, 5}, {12, SHIFT, 6}, {13, SHIFT, 7}, {14, SHIFT, 8}, {16, SHIFT, 9}, {17, SHIFT, 10}, {20, SHIFT, 11}, {21, SHIFT, 12}, {22, SHIFT, 13}, {24, SHIFT, 14}, {27, SHIFT, 15}, },
			{{-1, ERROR, 15}, {23, SHIFT, 32}, },
			{{-1, ERROR, 16}, {28, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, {0, SHIFT, 33}, },
			{{-1, ERROR, 18}, {9, SHIFT, 34}, },
			{{-1, ERROR, 19}, {9, SHIFT, 35}, },
			{{-1, ERROR, 20}, {27, SHIFT, 36}, },
			{{-1, ERROR, 21}, {27, SHIFT, 37}, },
			{{-1, ERROR, 22}, {27, SHIFT, 38}, },
			{{-1, ERROR, 23}, {27, SHIFT, 39}, },
			{{-1, ERROR, 24}, {27, SHIFT, 40}, },
			{{-1, ERROR, 25}, {1, SHIFT, 41}, {3, SHIFT, 42}, },
			{{-1, ERROR, 26}, {18, SHIFT, 44}, },
			{{-1, REDUCE, 19}, {4, SHIFT, 45}, },
			{{-1, ERROR, 28}, {1, SHIFT, 41}, {3, SHIFT, 42}, },
			{{-1, ERROR, 29}, {1, SHIFT, 41}, {3, SHIFT, 42}, },
			{{-1, ERROR, 30}, {1, SHIFT, 41}, {3, SHIFT, 42}, },
			{{-1, ERROR, 31}, {25, SHIFT, 49}, },
			{{-1, ERROR, 32}, {15, SHIFT, 50}, },
			{{-1, ERROR, 33}, {2, SHIFT, 1}, {6, SHIFT, 2}, {8, SHIFT, 3}, {10, SHIFT, 4}, {11, SHIFT, 5}, {12, SHIFT, 6}, {13, SHIFT, 7}, {14, SHIFT, 8}, {16, SHIFT, 9}, {17, SHIFT, 10}, {20, SHIFT, 11}, {21, SHIFT, 12}, {22, SHIFT, 13}, {24, SHIFT, 14}, {27, SHIFT, 15}, },
			{{-1, ERROR, 34}, {27, SHIFT, 52}, },
			{{-1, ERROR, 35}, {27, SHIFT, 53}, },
			{{-1, ERROR, 36}, {25, SHIFT, 54}, },
			{{-1, ERROR, 37}, {25, SHIFT, 55}, },
			{{-1, ERROR, 38}, {25, SHIFT, 56}, },
			{{-1, ERROR, 39}, {25, SHIFT, 57}, },
			{{-1, ERROR, 40}, {4, SHIFT, 58}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 43}, {2, SHIFT, 1}, {6, SHIFT, 2}, {8, SHIFT, 3}, {10, SHIFT, 4}, {11, SHIFT, 5}, {12, SHIFT, 6}, {13, SHIFT, 7}, {14, SHIFT, 8}, {16, SHIFT, 9}, {17, SHIFT, 10}, {20, SHIFT, 11}, {21, SHIFT, 12}, {22, SHIFT, 13}, {24, SHIFT, 14}, {27, SHIFT, 15}, },
			{{-1, ERROR, 44}, {10, SHIFT, 60}, {11, SHIFT, 61}, {12, SHIFT, 62}, },
			{{-1, ERROR, 45}, {27, SHIFT, 27}, },
			{{-1, ERROR, 46}, {2, SHIFT, 1}, {6, SHIFT, 2}, {8, SHIFT, 3}, {10, SHIFT, 4}, {11, SHIFT, 5}, {12, SHIFT, 6}, {13, SHIFT, 7}, {14, SHIFT, 8}, {16, SHIFT, 9}, {17, SHIFT, 10}, {20, SHIFT, 11}, {21, SHIFT, 12}, {22, SHIFT, 13}, {24, SHIFT, 14}, {27, SHIFT, 15}, },
			{{-1, ERROR, 47}, {2, SHIFT, 1}, {6, SHIFT, 2}, {8, SHIFT, 3}, {10, SHIFT, 4}, {11, SHIFT, 5}, {12, SHIFT, 6}, {13, SHIFT, 7}, {14, SHIFT, 8}, {16, SHIFT, 9}, {17, SHIFT, 10}, {20, SHIFT, 11}, {21, SHIFT, 12}, {22, SHIFT, 13}, {24, SHIFT, 14}, {27, SHIFT, 15}, },
			{{-1, ERROR, 48}, {2, SHIFT, 1}, {6, SHIFT, 2}, {8, SHIFT, 3}, {10, SHIFT, 4}, {11, SHIFT, 5}, {12, SHIFT, 6}, {13, SHIFT, 7}, {14, SHIFT, 8}, {16, SHIFT, 9}, {17, SHIFT, 10}, {20, SHIFT, 11}, {21, SHIFT, 12}, {22, SHIFT, 13}, {24, SHIFT, 14}, {27, SHIFT, 15}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 50}, {27, SHIFT, 67}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 52}, {1, SHIFT, 41}, {3, SHIFT, 42}, },
			{{-1, ERROR, 53}, {1, SHIFT, 41}, {3, SHIFT, 42}, },
			{{-1, ERROR, 54}, {1, SHIFT, 41}, {3, SHIFT, 42}, },
			{{-1, ERROR, 55}, {1, SHIFT, 41}, {3, SHIFT, 42}, },
			{{-1, ERROR, 56}, {1, SHIFT, 41}, {3, SHIFT, 42}, },
			{{-1, ERROR, 57}, {1, SHIFT, 41}, {3, SHIFT, 42}, },
			{{-1, ERROR, 58}, {27, SHIFT, 74}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 60}, {24, SHIFT, 75}, },
			{{-1, ERROR, 61}, {24, SHIFT, 76}, },
			{{-1, ERROR, 62}, {24, SHIFT, 77}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 67}, {1, SHIFT, 41}, {3, SHIFT, 42}, },
			{{-1, ERROR, 68}, {2, SHIFT, 1}, {6, SHIFT, 2}, {8, SHIFT, 3}, {10, SHIFT, 4}, {11, SHIFT, 5}, {12, SHIFT, 6}, {13, SHIFT, 7}, {14, SHIFT, 8}, {16, SHIFT, 9}, {17, SHIFT, 10}, {20, SHIFT, 11}, {21, SHIFT, 12}, {22, SHIFT, 13}, {24, SHIFT, 14}, {27, SHIFT, 15}, },
			{{-1, ERROR, 69}, {2, SHIFT, 1}, {6, SHIFT, 2}, {8, SHIFT, 3}, {10, SHIFT, 4}, {11, SHIFT, 5}, {12, SHIFT, 6}, {13, SHIFT, 7}, {14, SHIFT, 8}, {16, SHIFT, 9}, {17, SHIFT, 10}, {20, SHIFT, 11}, {21, SHIFT, 12}, {22, SHIFT, 13}, {24, SHIFT, 14}, {27, SHIFT, 15}, },
			{{-1, ERROR, 70}, {2, SHIFT, 1}, {6, SHIFT, 2}, {8, SHIFT, 3}, {10, SHIFT, 4}, {11, SHIFT, 5}, {12, SHIFT, 6}, {13, SHIFT, 7}, {14, SHIFT, 8}, {16, SHIFT, 9}, {17, SHIFT, 10}, {20, SHIFT, 11}, {21, SHIFT, 12}, {22, SHIFT, 13}, {24, SHIFT, 14}, {27, SHIFT, 15}, },
			{{-1, ERROR, 71}, {2, SHIFT, 1}, {6, SHIFT, 2}, {8, SHIFT, 3}, {10, SHIFT, 4}, {11, SHIFT, 5}, {12, SHIFT, 6}, {13, SHIFT, 7}, {14, SHIFT, 8}, {16, SHIFT, 9}, {17, SHIFT, 10}, {20, SHIFT, 11}, {21, SHIFT, 12}, {22, SHIFT, 13}, {24, SHIFT, 14}, {27, SHIFT, 15}, },
			{{-1, ERROR, 72}, {2, SHIFT, 1}, {6, SHIFT, 2}, {8, SHIFT, 3}, {10, SHIFT, 4}, {11, SHIFT, 5}, {12, SHIFT, 6}, {13, SHIFT, 7}, {14, SHIFT, 8}, {16, SHIFT, 9}, {17, SHIFT, 10}, {20, SHIFT, 11}, {21, SHIFT, 12}, {22, SHIFT, 13}, {24, SHIFT, 14}, {27, SHIFT, 15}, },
			{{-1, ERROR, 73}, {2, SHIFT, 1}, {6, SHIFT, 2}, {8, SHIFT, 3}, {10, SHIFT, 4}, {11, SHIFT, 5}, {12, SHIFT, 6}, {13, SHIFT, 7}, {14, SHIFT, 8}, {16, SHIFT, 9}, {17, SHIFT, 10}, {20, SHIFT, 11}, {21, SHIFT, 12}, {22, SHIFT, 13}, {24, SHIFT, 14}, {27, SHIFT, 15}, },
			{{-1, ERROR, 74}, {25, SHIFT, 85}, },
			{{-1, ERROR, 75}, {27, SHIFT, 86}, },
			{{-1, ERROR, 76}, {27, SHIFT, 87}, },
			{{-1, ERROR, 77}, {27, SHIFT, 88}, },
			{{-1, ERROR, 78}, {2, SHIFT, 1}, {6, SHIFT, 2}, {8, SHIFT, 3}, {10, SHIFT, 4}, {11, SHIFT, 5}, {12, SHIFT, 6}, {13, SHIFT, 7}, {14, SHIFT, 8}, {16, SHIFT, 9}, {17, SHIFT, 10}, {20, SHIFT, 11}, {21, SHIFT, 12}, {22, SHIFT, 13}, {24, SHIFT, 14}, {27, SHIFT, 15}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 85}, {1, SHIFT, 41}, {3, SHIFT, 42}, },
			{{-1, ERROR, 86}, {25, SHIFT, 91}, },
			{{-1, ERROR, 87}, {25, SHIFT, 92}, },
			{{-1, ERROR, 88}, {25, SHIFT, 93}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 90}, {2, SHIFT, 1}, {6, SHIFT, 2}, {8, SHIFT, 3}, {10, SHIFT, 4}, {11, SHIFT, 5}, {12, SHIFT, 6}, {13, SHIFT, 7}, {14, SHIFT, 8}, {16, SHIFT, 9}, {17, SHIFT, 10}, {20, SHIFT, 11}, {21, SHIFT, 12}, {22, SHIFT, 13}, {24, SHIFT, 14}, {27, SHIFT, 15}, },
			{{-1, ERROR, 91}, {1, SHIFT, 41}, {3, SHIFT, 42}, },
			{{-1, ERROR, 92}, {1, SHIFT, 41}, {3, SHIFT, 42}, },
			{{-1, ERROR, 93}, {1, SHIFT, 41}, {3, SHIFT, 42}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 95}, {2, SHIFT, 1}, {6, SHIFT, 2}, {8, SHIFT, 3}, {10, SHIFT, 4}, {11, SHIFT, 5}, {12, SHIFT, 6}, {13, SHIFT, 7}, {14, SHIFT, 8}, {16, SHIFT, 9}, {17, SHIFT, 10}, {20, SHIFT, 11}, {21, SHIFT, 12}, {22, SHIFT, 13}, {24, SHIFT, 14}, {27, SHIFT, 15}, },
			{{-1, ERROR, 96}, {2, SHIFT, 1}, {6, SHIFT, 2}, {8, SHIFT, 3}, {10, SHIFT, 4}, {11, SHIFT, 5}, {12, SHIFT, 6}, {13, SHIFT, 7}, {14, SHIFT, 8}, {16, SHIFT, 9}, {17, SHIFT, 10}, {20, SHIFT, 11}, {21, SHIFT, 12}, {22, SHIFT, 13}, {24, SHIFT, 14}, {27, SHIFT, 15}, },
			{{-1, ERROR, 97}, {2, SHIFT, 1}, {6, SHIFT, 2}, {8, SHIFT, 3}, {10, SHIFT, 4}, {11, SHIFT, 5}, {12, SHIFT, 6}, {13, SHIFT, 7}, {14, SHIFT, 8}, {16, SHIFT, 9}, {17, SHIFT, 10}, {20, SHIFT, 11}, {21, SHIFT, 12}, {22, SHIFT, 13}, {24, SHIFT, 14}, {27, SHIFT, 15}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 13}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 16}, {14, 31}, },
			{{-1, 17}, {33, 51}, {43, 59}, {46, 64}, {47, 65}, {48, 66}, {68, 79}, {69, 80}, {70, 81}, {71, 82}, {72, 83}, {73, 84}, {78, 89}, {90, 94}, {95, 98}, {96, 99}, {97, 100}, },
			{{-1, 28}, {12, 29}, {45, 63}, },
			{{-1, 43}, {28, 46}, {29, 47}, {30, 48}, {52, 68}, {53, 69}, {54, 70}, {55, 71}, {56, 72}, {57, 73}, {67, 78}, {85, 90}, {91, 95}, {92, 96}, {93, 97}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'nil', 'send', 'receive', 'X', 'Y', 'Z', 'H', 'CNOT', 'newqubit', 'if', 'input', 'output', 'print', '(', id",
			"expecting: '|', ')', EOF",
			"expecting: id",
			"expecting: '('",
			"expecting: ':='",
			"expecting: EOF",
			"expecting: 'on'",
			"expecting: '.', ';'",
			"expecting: 'then'",
			"expecting: '.', ';', ','",
			"expecting: ')'",
			"expecting: 'measure'",
			"expecting: ','",
			"expecting: 'X', 'Y', 'Z'",
			"expecting: ')', EOF",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 0, 4, 5, 1, 6, 6, 2, 2, 2, 2, 2, 7, 8, 9, 7, 7, 7, 10, 11, 0, 2, 2, 10, 10, 10, 10, 12, 0, 0, 0, 13, 2, 0, 0, 0, 1, 2, 14, 7, 7, 7, 7, 7, 7, 2, 1, 3, 3, 3, 7, 1, 1, 1, 7, 0, 0, 0, 0, 0, 0, 10, 2, 2, 2, 0, 1, 1, 1, 1, 1, 1, 7, 10, 10, 10, 1, 0, 7, 7, 7, 1, 0, 0, 0, 1, 1, 1, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
