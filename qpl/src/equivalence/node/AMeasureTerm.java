/* This file was generated by SableCC (http://www.sablecc.org/). */

package equivalence.node;

import equivalence.analysis.*;

@SuppressWarnings("nls")
public final class AMeasureTerm extends PTerm
{
    private TId _target_;
    private TAssign _assign_;
    private TMeasure _measure_;
    private TId _source_;
    private PSep _sep_;
    private PTerm _term_;

    public AMeasureTerm()
    {
        // Constructor
    }

    public AMeasureTerm(
        @SuppressWarnings("hiding") TId _target_,
        @SuppressWarnings("hiding") TAssign _assign_,
        @SuppressWarnings("hiding") TMeasure _measure_,
        @SuppressWarnings("hiding") TId _source_,
        @SuppressWarnings("hiding") PSep _sep_,
        @SuppressWarnings("hiding") PTerm _term_)
    {
        // Constructor
        setTarget(_target_);

        setAssign(_assign_);

        setMeasure(_measure_);

        setSource(_source_);

        setSep(_sep_);

        setTerm(_term_);

    }

    @Override
    public Object clone()
    {
        return new AMeasureTerm(
            cloneNode(this._target_),
            cloneNode(this._assign_),
            cloneNode(this._measure_),
            cloneNode(this._source_),
            cloneNode(this._sep_),
            cloneNode(this._term_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMeasureTerm(this);
    }

    public TId getTarget()
    {
        return this._target_;
    }

    public void setTarget(TId node)
    {
        if(this._target_ != null)
        {
            this._target_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._target_ = node;
    }

    public TAssign getAssign()
    {
        return this._assign_;
    }

    public void setAssign(TAssign node)
    {
        if(this._assign_ != null)
        {
            this._assign_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._assign_ = node;
    }

    public TMeasure getMeasure()
    {
        return this._measure_;
    }

    public void setMeasure(TMeasure node)
    {
        if(this._measure_ != null)
        {
            this._measure_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._measure_ = node;
    }

    public TId getSource()
    {
        return this._source_;
    }

    public void setSource(TId node)
    {
        if(this._source_ != null)
        {
            this._source_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._source_ = node;
    }

    public PSep getSep()
    {
        return this._sep_;
    }

    public void setSep(PSep node)
    {
        if(this._sep_ != null)
        {
            this._sep_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._sep_ = node;
    }

    public PTerm getTerm()
    {
        return this._term_;
    }

    public void setTerm(PTerm node)
    {
        if(this._term_ != null)
        {
            this._term_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._term_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._target_)
            + toString(this._assign_)
            + toString(this._measure_)
            + toString(this._source_)
            + toString(this._sep_)
            + toString(this._term_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._target_ == child)
        {
            this._target_ = null;
            return;
        }

        if(this._assign_ == child)
        {
            this._assign_ = null;
            return;
        }

        if(this._measure_ == child)
        {
            this._measure_ = null;
            return;
        }

        if(this._source_ == child)
        {
            this._source_ = null;
            return;
        }

        if(this._sep_ == child)
        {
            this._sep_ = null;
            return;
        }

        if(this._term_ == child)
        {
            this._term_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._target_ == oldChild)
        {
            setTarget((TId) newChild);
            return;
        }

        if(this._assign_ == oldChild)
        {
            setAssign((TAssign) newChild);
            return;
        }

        if(this._measure_ == oldChild)
        {
            setMeasure((TMeasure) newChild);
            return;
        }

        if(this._source_ == oldChild)
        {
            setSource((TId) newChild);
            return;
        }

        if(this._sep_ == oldChild)
        {
            setSep((PSep) newChild);
            return;
        }

        if(this._term_ == oldChild)
        {
            setTerm((PTerm) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
