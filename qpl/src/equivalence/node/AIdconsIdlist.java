/* This file was generated by SableCC (http://www.sablecc.org/). */

package equivalence.node;

import equivalence.analysis.*;

@SuppressWarnings("nls")
public final class AIdconsIdlist extends PIdlist
{
    private TId _id_;
    private TComma _comma_;
    private PIdlist _idlist_;

    public AIdconsIdlist()
    {
        // Constructor
    }

    public AIdconsIdlist(
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") PIdlist _idlist_)
    {
        // Constructor
        setId(_id_);

        setComma(_comma_);

        setIdlist(_idlist_);

    }

    @Override
    public Object clone()
    {
        return new AIdconsIdlist(
            cloneNode(this._id_),
            cloneNode(this._comma_),
            cloneNode(this._idlist_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIdconsIdlist(this);
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public PIdlist getIdlist()
    {
        return this._idlist_;
    }

    public void setIdlist(PIdlist node)
    {
        if(this._idlist_ != null)
        {
            this._idlist_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._idlist_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._id_)
            + toString(this._comma_)
            + toString(this._idlist_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._idlist_ == child)
        {
            this._idlist_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._idlist_ == oldChild)
        {
            setIdlist((PIdlist) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
