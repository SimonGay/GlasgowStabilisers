/* This file was generated by SableCC (http://www.sablecc.org/). */

package equivalence.analysis;

import java.util.*;
import equivalence.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATermProcess(ATermProcess node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParallelProcess(AParallelProcess node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANilTerm(ANilTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASendTerm(ASendTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReceiveTerm(AReceiveTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMeasureTerm(AMeasureTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAXTerm(AXTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAYTerm(AYTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAZTerm(AZTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAHTerm(AHTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACnotTerm(ACnotTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfxTerm(AIfxTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfyTerm(AIfyTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfzTerm(AIfzTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANewTerm(ANewTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInputTerm(AInputTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOutputTerm(AOutputTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrintTerm(APrintTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParensTerm(AParensTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdIdlist(AIdIdlist node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdconsIdlist(AIdconsIdlist node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADotSep(ADotSep node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASemiSep(ASemiSep node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTParallel(TParallel node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNil(TNil node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSemi(TSemi node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBang(TBang node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSend(TSend node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTQuery(TQuery node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReceive(TReceive node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOn(TOn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTX(TX node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTY(TY node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTZ(TZ node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTH(TH node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCnot(TCnot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMeasure(TMeasure node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNewqubit(TNewqubit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThen(TThen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInput(TInput node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOutput(TOutput node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPrint(TPrint node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAssign(TAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLparen(TLparen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRparen(TRparen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIntlit(TIntlit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
